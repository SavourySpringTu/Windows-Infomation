// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.0--rc1
// source: agent_client.proto

package agent_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MessageCommandService_StreamMessageCommand_FullMethodName = "/proto.MessageCommandService/StreamMessageCommand"
)

// MessageCommandServiceClient is the client API for MessageCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageCommandServiceClient interface {
	StreamMessageCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageCommand, MessageCommand], error)
}

type messageCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageCommandServiceClient(cc grpc.ClientConnInterface) MessageCommandServiceClient {
	return &messageCommandServiceClient{cc}
}

func (c *messageCommandServiceClient) StreamMessageCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[MessageCommand, MessageCommand], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MessageCommandService_ServiceDesc.Streams[0], MessageCommandService_StreamMessageCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MessageCommand, MessageCommand]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageCommandService_StreamMessageCommandClient = grpc.BidiStreamingClient[MessageCommand, MessageCommand]

// MessageCommandServiceServer is the server API for MessageCommandService service.
// All implementations must embed UnimplementedMessageCommandServiceServer
// for forward compatibility.
type MessageCommandServiceServer interface {
	StreamMessageCommand(grpc.BidiStreamingServer[MessageCommand, MessageCommand]) error
	mustEmbedUnimplementedMessageCommandServiceServer()
}

// UnimplementedMessageCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMessageCommandServiceServer struct{}

func (UnimplementedMessageCommandServiceServer) StreamMessageCommand(grpc.BidiStreamingServer[MessageCommand, MessageCommand]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessageCommand not implemented")
}
func (UnimplementedMessageCommandServiceServer) mustEmbedUnimplementedMessageCommandServiceServer() {}
func (UnimplementedMessageCommandServiceServer) testEmbeddedByValue()                               {}

// UnsafeMessageCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageCommandServiceServer will
// result in compilation errors.
type UnsafeMessageCommandServiceServer interface {
	mustEmbedUnimplementedMessageCommandServiceServer()
}

func RegisterMessageCommandServiceServer(s grpc.ServiceRegistrar, srv MessageCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedMessageCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MessageCommandService_ServiceDesc, srv)
}

func _MessageCommandService_StreamMessageCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageCommandServiceServer).StreamMessageCommand(&grpc.GenericServerStream[MessageCommand, MessageCommand]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MessageCommandService_StreamMessageCommandServer = grpc.BidiStreamingServer[MessageCommand, MessageCommand]

// MessageCommandService_ServiceDesc is the grpc.ServiceDesc for MessageCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.MessageCommandService",
	HandlerType: (*MessageCommandServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessageCommand",
			Handler:       _MessageCommandService_StreamMessageCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "agent_client.proto",
}
